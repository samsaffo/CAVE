//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/JoystickControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @JoystickControls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @JoystickControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""JoystickControls"",
    ""maps"": [
        {
            ""name"": ""Gameplay"",
            ""id"": ""2d8fc696-9894-4c8e-8a46-91da1fed2bce"",
            ""actions"": [
                {
                    ""name"": ""Move_Forward"",
                    ""type"": ""Button"",
                    ""id"": ""400dafc2-d75d-4a8b-bbcc-20f24d746569"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move_Backward"",
                    ""type"": ""Button"",
                    ""id"": ""663f17d1-a5b0-4bc5-b18f-149f320e8177"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move_Left"",
                    ""type"": ""Button"",
                    ""id"": ""b893a007-326c-49e7-bd30-2182f601f9ec"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move_Right"",
                    ""type"": ""Button"",
                    ""id"": ""3ce92d37-386d-4b65-8839-a3d9aecbb755"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lift_Up"",
                    ""type"": ""Button"",
                    ""id"": ""2592970d-6ba9-4a05-85f2-f7a0a758fa18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Lift_Down"",
                    ""type"": ""Button"",
                    ""id"": ""155b987f-389a-4e6f-9b35-ac65d4917b1f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pickup"",
                    ""type"": ""Button"",
                    ""id"": ""31fed0dc-d8b3-4b5b-be6e-9c98d3b6fc80"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""19a1f384-0516-4b22-b049-6e051ad4f5d3"",
                    ""path"": ""<HID::Thrustmaster T.16000M>{RightHand}/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move_Forward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""304d4209-8ec5-493c-8fd1-c78da5ec4c19"",
                    ""path"": ""<HID::Thrustmaster T.16000M>{RightHand}/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move_Backward"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5ab25ec4-3fa0-4ad5-8f68-8f28e1db58c0"",
                    ""path"": ""<HID::Thrustmaster T.16000M>{RightHand}/stick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move_Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""92a8a2bd-3a02-4345-a6ca-4d6d10cba087"",
                    ""path"": ""<HID::Thrustmaster T.16000M>{RightHand}/stick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move_Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4be8c0bf-5b2c-4479-9a2c-3a0790e9cd81"",
                    ""path"": ""<HID::Thrustmaster T.16000M>{LeftHand}/stick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lift_Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d01b6e32-e2b8-45e9-82d4-149a112ca262"",
                    ""path"": ""<HID::Thrustmaster T.16000M>{LeftHand}/stick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Lift_Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a46473b3-9770-4315-b528-0ed332c0c281"",
                    ""path"": ""<HID::Thrustmaster T.16000M>/trigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pickup"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Gameplay
        m_Gameplay = asset.FindActionMap("Gameplay", throwIfNotFound: true);
        m_Gameplay_Move_Forward = m_Gameplay.FindAction("Move_Forward", throwIfNotFound: true);
        m_Gameplay_Move_Backward = m_Gameplay.FindAction("Move_Backward", throwIfNotFound: true);
        m_Gameplay_Move_Left = m_Gameplay.FindAction("Move_Left", throwIfNotFound: true);
        m_Gameplay_Move_Right = m_Gameplay.FindAction("Move_Right", throwIfNotFound: true);
        m_Gameplay_Lift_Up = m_Gameplay.FindAction("Lift_Up", throwIfNotFound: true);
        m_Gameplay_Lift_Down = m_Gameplay.FindAction("Lift_Down", throwIfNotFound: true);
        m_Gameplay_Pickup = m_Gameplay.FindAction("Pickup", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay
    private readonly InputActionMap m_Gameplay;
    private IGameplayActions m_GameplayActionsCallbackInterface;
    private readonly InputAction m_Gameplay_Move_Forward;
    private readonly InputAction m_Gameplay_Move_Backward;
    private readonly InputAction m_Gameplay_Move_Left;
    private readonly InputAction m_Gameplay_Move_Right;
    private readonly InputAction m_Gameplay_Lift_Up;
    private readonly InputAction m_Gameplay_Lift_Down;
    private readonly InputAction m_Gameplay_Pickup;
    public struct GameplayActions
    {
        private @JoystickControls m_Wrapper;
        public GameplayActions(@JoystickControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move_Forward => m_Wrapper.m_Gameplay_Move_Forward;
        public InputAction @Move_Backward => m_Wrapper.m_Gameplay_Move_Backward;
        public InputAction @Move_Left => m_Wrapper.m_Gameplay_Move_Left;
        public InputAction @Move_Right => m_Wrapper.m_Gameplay_Move_Right;
        public InputAction @Lift_Up => m_Wrapper.m_Gameplay_Lift_Up;
        public InputAction @Lift_Down => m_Wrapper.m_Gameplay_Lift_Down;
        public InputAction @Pickup => m_Wrapper.m_Gameplay_Pickup;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(GameplayActions set) { return set.Get(); }
        public void SetCallbacks(IGameplayActions instance)
        {
            if (m_Wrapper.m_GameplayActionsCallbackInterface != null)
            {
                @Move_Forward.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_Forward;
                @Move_Forward.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_Forward;
                @Move_Forward.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_Forward;
                @Move_Backward.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_Backward;
                @Move_Backward.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_Backward;
                @Move_Backward.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_Backward;
                @Move_Left.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_Left;
                @Move_Left.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_Left;
                @Move_Left.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_Left;
                @Move_Right.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_Right;
                @Move_Right.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_Right;
                @Move_Right.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnMove_Right;
                @Lift_Up.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLift_Up;
                @Lift_Up.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLift_Up;
                @Lift_Up.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLift_Up;
                @Lift_Down.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLift_Down;
                @Lift_Down.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLift_Down;
                @Lift_Down.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnLift_Down;
                @Pickup.started -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPickup;
                @Pickup.performed -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPickup;
                @Pickup.canceled -= m_Wrapper.m_GameplayActionsCallbackInterface.OnPickup;
            }
            m_Wrapper.m_GameplayActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move_Forward.started += instance.OnMove_Forward;
                @Move_Forward.performed += instance.OnMove_Forward;
                @Move_Forward.canceled += instance.OnMove_Forward;
                @Move_Backward.started += instance.OnMove_Backward;
                @Move_Backward.performed += instance.OnMove_Backward;
                @Move_Backward.canceled += instance.OnMove_Backward;
                @Move_Left.started += instance.OnMove_Left;
                @Move_Left.performed += instance.OnMove_Left;
                @Move_Left.canceled += instance.OnMove_Left;
                @Move_Right.started += instance.OnMove_Right;
                @Move_Right.performed += instance.OnMove_Right;
                @Move_Right.canceled += instance.OnMove_Right;
                @Lift_Up.started += instance.OnLift_Up;
                @Lift_Up.performed += instance.OnLift_Up;
                @Lift_Up.canceled += instance.OnLift_Up;
                @Lift_Down.started += instance.OnLift_Down;
                @Lift_Down.performed += instance.OnLift_Down;
                @Lift_Down.canceled += instance.OnLift_Down;
                @Pickup.started += instance.OnPickup;
                @Pickup.performed += instance.OnPickup;
                @Pickup.canceled += instance.OnPickup;
            }
        }
    }
    public GameplayActions @Gameplay => new GameplayActions(this);
    public interface IGameplayActions
    {
        void OnMove_Forward(InputAction.CallbackContext context);
        void OnMove_Backward(InputAction.CallbackContext context);
        void OnMove_Left(InputAction.CallbackContext context);
        void OnMove_Right(InputAction.CallbackContext context);
        void OnLift_Up(InputAction.CallbackContext context);
        void OnLift_Down(InputAction.CallbackContext context);
        void OnPickup(InputAction.CallbackContext context);
    }
}
